// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	domains "technical-test-be-abc/domains"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetProfile provides a mock function with given fields: userId
func (_m *Service) GetProfile(userId string) (domains.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domains.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) domains.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(domains.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: userReq
func (_m *Service) Login(userReq domains.UserLogin) (string, error) {
	ret := _m.Called(userReq)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(domains.UserLogin) (string, error)); ok {
		return rf(userReq)
	}
	if rf, ok := ret.Get(0).(func(domains.UserLogin) string); ok {
		r0 = rf(userReq)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(domains.UserLogin) error); ok {
		r1 = rf(userReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *Service) Register(_a0 domains.UserRegister) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domains.UserRegister) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
