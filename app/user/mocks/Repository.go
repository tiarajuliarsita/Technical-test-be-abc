// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	domains "technical-test-be-abc/domains"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: email
func (_m *Repository) FindByEmail(email string) (domains.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domains.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) domains.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domains.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: userId
func (_m *Repository) FindById(userId string) (domains.User, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domains.User, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) domains.User); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(domains.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *Repository) Register(_a0 domains.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domains.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
